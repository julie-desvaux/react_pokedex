{"version":3,"sources":["helpers/format-date.ts","helpers/format-type.ts","components/pokemon-card.tsx","models/mock-pokemon.ts","services/pokemon-service.ts","components/pokemon-search.tsx","components/loader.tsx","pages/pokemon-list.tsx","pages/pokemon-detail.tsx","pages/page-not-found.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","models/pokemon.ts","pages/pokemon-add.tsx","services/authentication-service.ts","pages/login.tsx","PrivateRoute.tsx","App.tsx","index.tsx"],"names":["formatDate","date","Date","getDate","getMonth","getFullYear","formatType","type","color","PokemonCard","pokemon","borderColor","useState","setColor","history","useHistory","className","onClick","id","push","onMouseEnter","onMouseLeave","style","src","picture","alt","name","created","types","map","key","POKEMONS","hp","cp","PokemonService","this","isDev","fetch","then","response","json","catch","error","handleError","Promise","resolve","pokemons","data","isEmpty","find","method","body","JSON","stringify","headers","index","findIndex","filter","term","includes","Object","keys","length","console","process","PokemonSearch","setTerm","setPokemons","placeholder","value","onChange","e","target","searchPokemon","handleInputChange","to","Loader","PokemonList","useEffect","getPokemons","position","bottom","right","PokemonsDetail","match","setPokemon","getPokemon","params","width","margin","PageNotFound","PokemonForm","isEditForm","isValid","form","setForm","hasType","fieldName","fieldValue","newField","isAddForm","isTypesValid","handleSubmit","preventDefault","newForm","startsWith","endsWith","test","validateForm","updatePokemon","addPokemon","onSubmit","deletePokemon","htmlFor","marginBottom","disabled","checked","concat","currentType","selectType","PokemonEdit","Pokemon","PokemonAdd","getTime","AuthentificationService","username","password","isAuthenticated","setTimeout","Login","message","setMessage","AuthenticationService","login","PrivateRoute","Component","component","rest","render","props","pathname","App","exact","path","PokemonDetail","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6f914af3.chunk.js","sourcesContent":["const formatDate = (date: Date = new Date()): String => {\r\n    return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`;\r\n}\r\n\r\nexport default formatDate;","const formatType = (type: string): string => {\r\n    let color: string;\r\n   \r\n    switch (type) {\r\n        case 'Feu': \r\n            color = 'red lighten-1'; \r\n            break; \r\n        case 'Eau': \r\n            color = 'blue lighten-1'; \r\n            break; \r\n        case 'Plante': \r\n            color = 'green lighten-1'; \r\n            break; \r\n        case 'Insecte': \r\n            color = 'brown lighten-1'; \r\n            break; \r\n        case 'Normal': \r\n            color = 'grey lighten-3'; \r\n            break; \r\n        case 'Vol': \r\n            color = 'blue lighten-3'; \r\n            break; \r\n        case 'Poison': \r\n            color = 'deep-purple accent-1'; \r\n            break; \r\n        case 'Fée': \r\n            color = 'pink lighten-4'; \r\n            break; \r\n        case 'Psy': \r\n            color = 'deep-purple darken-2'; \r\n            break; \r\n        case 'Electrik': \r\n            color = 'lime accent-1'; \r\n            break; \r\n        case 'Combat': \r\n            color = 'deep-orange'; \r\n            break; \r\n        default: \r\n            color = 'grey'; \r\n            break; \r\n    }\r\n   \r\n    return `chip ${color}`;\r\n  }\r\n\r\nexport default formatType;","import React, { FunctionComponent, useState } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport './pokemon-card.css';\r\nimport formatDate from '../helpers/format-date';\r\nimport formatType from '../helpers/format-type';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ntype Props = {\r\n    pokemon: Pokemon\r\n    borderColor?: string\r\n};\r\n\r\nconst PokemonCard: FunctionComponent<Props> = ({pokemon, borderColor = '#009688'}) => {\r\n\r\n    const [color, setColor] = useState<string>();\r\n    const history = useHistory();\r\n\r\n    const showBorder = () => {\r\n        setColor(borderColor);        \r\n    }\r\n\r\n    const hideBorder = () => {\r\n        setColor('#f5f5f5'); // On remet la bordure en gris.\r\n    }\r\n\r\n    const goToPokemon = (id: number) => {\r\n        history.push(`/pokemons/${id}`);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"col s12 m6 l4\" onClick={() => goToPokemon(pokemon.id)} onMouseEnter={showBorder} onMouseLeave={hideBorder}>\r\n            <div className=\"card horizontal\" style={{ borderColor: color}}>\r\n                <div className=\"card-image\">\r\n                    <img src={pokemon.picture} alt={pokemon.name} />\r\n                </div>\r\n                <div className=\"card-stacked\">\r\n                    <div className=\"card-content\">\r\n                        <p>{pokemon.name}</p>\r\n                        <p><small>{formatDate(pokemon.created)}</small></p>\r\n                        {pokemon.types.map(type => (\r\n                            <span key={type} className={formatType(type)}>{type}</span>\r\n                        ))}\r\n                    </div> {/* /div card-content */}\r\n                </div> {/* /div card-stacked */}\r\n            </div>  {/* /div card-horizontal */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonCard;","import Pokemon from './pokemon';\r\n   \r\nexport const POKEMONS: Pokemon[] = [\r\n {\r\n  id: 1,\r\n  name: \"Bulbizarre\",\r\n  hp: 25,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\r\n  types: [\"Plante\", \"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 2,\r\n  name: \"Salamèche\",\r\n  hp: 28,\r\n  cp: 6,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",\r\n  types: [\"Feu\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 3,\r\n  name: \"Carapuce\",\r\n  hp: 21,\r\n  cp: 4,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",\r\n  types: [\"Eau\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 4,\r\n  name: \"Aspicot\",\r\n  hp: 16,\r\n  cp: 2,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png\",\r\n  types: [\"Insecte\", \"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 5,\r\n  name: \"Roucool\",\r\n  hp: 30,\r\n  cp: 7,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/016.png\",\r\n  types: [\"Normal\", \"Vol\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 6,\r\n  name: \"Rattata\",\r\n  hp: 18,\r\n  cp: 6,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/019.png\",\r\n  types: [\"Normal\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 7,\r\n  name: \"Piafabec\",\r\n  hp: 14,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/021.png\",\r\n  types: [\"Normal\", \"Vol\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 8,\r\n  name: \"Abo\",\r\n  hp: 16,\r\n  cp: 4,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png\",\r\n  types: [\"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 9,\r\n  name: \"Pikachu\",\r\n  hp: 21,\r\n  cp: 7,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/025.png\",\r\n  types: [\"Electrik\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 10,\r\n  name: \"Sabelette\",\r\n  hp: 19,\r\n  cp: 3,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/027.png\",\r\n  types: [\"Normal\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 11,\r\n  name: \"Mélofée\",\r\n  hp: 25,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/035.png\",\r\n  types: [\"Fée\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 12,\r\n  name: \"Groupix\",\r\n  hp: 17,\r\n  cp: 8,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png\",\r\n  types: [\"Feu\"],\r\n  created: new Date()\r\n }\r\n];\r\n  \r\nexport default POKEMONS;","import Pokemon from \"../models/pokemon\";\r\nimport POKEMONS from \"../models/mock-pokemon\";\r\n  \r\nexport default class PokemonService {\r\n  \r\n    static pokemons:Pokemon[] = POKEMONS;\r\n    \r\n    static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development');\r\n    \r\n    static getPokemons(): Promise<Pokemon[]> {\r\n        if(this.isDev) {\r\n            return fetch('http://localhost:3001/pokemons')\r\n                .then(response => response.json())\r\n                .catch(error => this.handleError(error));\r\n        }\r\n    \r\n        return new Promise(resolve => {\r\n            resolve(this.pokemons);\r\n        });\r\n    }\r\n    \r\n    static getPokemon(id: number): Promise<Pokemon|null> {\r\n        if(this.isDev) {\r\n            return fetch(`http://localhost:3001/pokemons/${id}`)\r\n                .then(response => response.json())\r\n                .then(data => this.isEmpty(data) ? null : data)\r\n                .catch(error => this.handleError(error));\r\n        }\r\n    \r\n        return new Promise(resolve => {    \r\n            resolve(this.pokemons.find(pokemon => id === pokemon.id));\r\n        }); \r\n    }\r\n    \r\n    static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n        if(this.isDev) {\r\n            return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n                method: 'PUT',\r\n                body: JSON.stringify(pokemon),\r\n                headers: { 'Content-Type': 'application/json'}\r\n        })\r\n            .then(response => response.json())\r\n            .catch(error => this.handleError(error));\r\n        }\r\n    \r\n        return new Promise(resolve => {\r\n            const { id } = pokemon;\r\n            const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\r\n            this.pokemons[index] = pokemon;\r\n            resolve(pokemon);\r\n        }); \r\n    }\r\n    \r\n    static deletePokemon(pokemon: Pokemon): Promise<{}> {\r\n        if(this.isDev) {\r\n            return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n                method: 'DELETE',\r\n                headers: { 'Content-Type': 'application/json'}\r\n        })\r\n            .then(response => response.json())\r\n            .catch(error => this.handleError(error));\r\n        }\r\n    \r\n        return new Promise(resolve => {    \r\n            const { id } = pokemon;\r\n            this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\r\n            resolve({});\r\n        }); \r\n    }\r\n    \r\n    static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n        pokemon.created = new Date(pokemon.created);\r\n    \r\n        if(this.isDev) {\r\n            return fetch(`http://localhost:3001/pokemons`, {\r\n                method: 'POST',\r\n                body: JSON.stringify(pokemon),\r\n                headers: { 'Content-Type': 'application/json'}\r\n        })\r\n            .then(response => response.json())\r\n            .catch(error => this.handleError(error));\r\n        }\r\n    \r\n        return new Promise(resolve => {    \r\n            this.pokemons.push(pokemon);\r\n            resolve(pokemon);\r\n        }); \r\n    }\r\n    \r\n    static searchPokemon(term: string): Promise<Pokemon[]> {\r\n        if(this.isDev) {\r\n            return fetch(`http://localhost:3001/pokemons?q=${term}`)\r\n                .then(response => response.json())\r\n                .catch(error => this.handleError(error));\r\n        }\r\n    \r\n        return new Promise(resolve => {    \r\n            const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\r\n            resolve(results);\r\n        });\r\n    \r\n    }\r\n    \r\n    static isEmpty(data: Object): boolean {\r\n        return Object.keys(data).length === 0;\r\n    }\r\n    \r\n    static handleError(error: Error): void {\r\n        console.error(error);\r\n    }\r\n}","import React, { FunctionComponent, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonService from '../services/pokemon-service';\r\n \r\nconst PokemonSearch: FunctionComponent = () => {\r\n  \r\n    const [term, setTerm] = useState<string>('');\r\n    const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n    \r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const term = e.target.value;\r\n        setTerm(term);\r\n    \r\n        if(term.length <= 1) {\r\n            setPokemons([]);\r\n            return;\r\n        }\r\n    \r\n        PokemonService.searchPokemon(term).then(pokemons => setPokemons(pokemons));\r\n    }\r\n    \r\n    return (\r\n        <div className=\"row\"> \r\n            <div className=\"col s12 m6 offset-m3\"> \r\n                <div className=\"card\"> \r\n                    <div className=\"card-content\"> \r\n                        <div className=\"input-field\"> \r\n                            <input type=\"text\" placeholder=\"Rechercher un pokémon\" value={term} onChange={e => handleInputChange(e)} /> \r\n                        </div> \r\n                        <div className='collection'>\r\n                            {pokemons.map((pokemon) => (\r\n                            <Link key={pokemon.id} to={`/pokemons/${pokemon.id}`} className=\"collection-item\">\r\n                                {pokemon.name}\r\n                            </Link>\r\n                            ))}\r\n                        </div> {/* /div collection */}\r\n                    </div>  {/* /div card-content */}\r\n                </div>  {/* /div card */}\r\n            </div>  {/* /div col */}\r\n        </div>\r\n    );\r\n}\r\n  \r\nexport default PokemonSearch;","import React, { FunctionComponent } from 'react';\r\n  \r\nconst Loader: FunctionComponent = () => {\r\n   \r\n    return (\r\n        <div className=\"preloader-wrapper big active\"> \r\n            <div className=\"spinner-layer spinner-blue\"> \r\n                <div className=\"circle-clipper left\"> \r\n                    <div className=\"circle\"></div> \r\n                </div> { /* /div circle-clipper feft */}\r\n                <div className=\"gap-patch\"> \r\n                    <div className=\"circle\"></div> \r\n                </div> { /* /div gap-patch */}\r\n                <div className=\"circle-clipper right\"> \r\n                    <div className=\"circle\"></div> \r\n                </div> { /* /div circle-clipper righ */}\r\n            </div> { /* /div spinner-layer spinner-blue */}\r\n        </div> \r\n    );\r\n}\r\n   \r\nexport default Loader;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonCard from '../components/pokemon-card';\r\nimport PokemonService from '../services/pokemon-service';\r\nimport { Link } from 'react-router-dom';\r\nimport PokemonSearch from '../components/pokemon-search';\r\nimport Loader from '../components/loader';\r\n\r\nconst PokemonList: FunctionComponent = () => {\r\n    const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n\r\n    useEffect(() => {\r\n        PokemonService.getPokemons().then(pokemons => setPokemons(pokemons));\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"center\">Pokédex</h1>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <PokemonSearch />\r\n                    {pokemons.map(pokemon =>(\r\n                        <PokemonCard key={pokemon.id} pokemon={pokemon} />\r\n                    ))}\r\n                    <Loader />                  \r\n                </div>\r\n                <Link className=\"btn-floating btn-large waves-effect waves-light red z-depth-3\"\r\n                    style={{position: 'fixed', bottom: '25px', right:'25px' }}\r\n                    to=\"/pokemons/add\"\r\n                >\r\n                    <i className=\"material-icons\">add</i>\r\n                </Link>                \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonList;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps, Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatDate from '../helpers/format-date';\r\nimport formatType from '../helpers/format-type';\r\nimport PokemonService from '../services/pokemon-service';\r\nimport Loader from '../components/loader';\r\n  \r\ntype Params = { id: string };\r\n  \r\nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n    \r\n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\r\n  \r\n  useEffect(() => {\r\n    PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\r\n  }, [match.params.id]);\r\n    \r\n  return (\r\n    <div>\r\n        { pokemon ? (\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m8 offset-m2\"> \r\n                    <h2 className=\"header center\">{ pokemon.name }</h2>\r\n                    <div className=\"card hoverable\"> \r\n                        <div className=\"card-image\">\r\n                            <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n                            <Link to={`/pokemons/edit/${pokemon.id}`} className=\"btn btn-floating halfway-fab wave-effect waves-light\">\r\n                                <i className=\"material-icons\">edit</i>\r\n                            </Link>\r\n                        </div>\r\n                        <div className=\"card-stacked\">\r\n                            <div className=\"card-content\">\r\n                                <table className=\"bordered striped\">\r\n                                    <tbody>\r\n                                        <tr> \r\n                                            <td>Nom</td> \r\n                                            <td><strong>{ pokemon.name }</strong></td> \r\n                                        </tr>\r\n                                        <tr> \r\n                                            <td>Points de vie</td> \r\n                                            <td><strong>{ pokemon.hp }</strong></td> \r\n                                        </tr> \r\n                                        <tr> \r\n                                            <td>Dégâts</td> \r\n                                            <td><strong>{ pokemon.cp }</strong></td> \r\n                                        </tr> \r\n                                        <tr> \r\n                                            <td>Types</td> \r\n                                            <td>\r\n                                            {pokemon.types.map(type => (\r\n                                            <span key={type} className={formatType(type)}>{type}</span>\r\n                                            ))}</td> \r\n                                        </tr> \r\n                                        <tr> \r\n                                            <td>Date de création</td> \r\n                                            <td>{formatDate(pokemon.created)}</td> \r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                            <div className=\"card-action\">\r\n                                <Link to=\"/\">Retour</Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        ) : (\r\n            <h4 className=\"center\"><Loader/></h4>\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonsDetail;","import React, { FunctionComponent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PageNotFound: FunctionComponent = () => {\r\n\r\n    return (\r\n        <div className=\"center\">\r\n            <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\r\n            <h1>Hey, cette page n'existe pas !</h1>\r\n            <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\r\n                Retourner à l'accueil\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PageNotFound;","import React, { FunctionComponent, useState, FieldsetHTMLAttributes } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatType from '../helpers/format-type';\r\nimport PokemonService from '../services/pokemon-service';\r\n  \r\ntype Props = {\r\n  pokemon: Pokemon,\r\n  isEditForm: boolean\r\n};\r\n\r\ntype Field = {\r\n    value?: any,\r\n    error?: string,\r\n    isValid?: boolean\r\n};\r\n\r\ntype Form = {\r\n    picture: Field,\r\n    name: Field,\r\n    hp: Field,\r\n    cp: Field,\r\n    types: Field\r\n}\r\n  \r\nconst PokemonForm: FunctionComponent<Props> = ({pokemon, isEditForm}) => {\r\n\r\n    const [form, setForm] = useState<Form>({\r\n        picture: { value: pokemon.picture },\r\n        name: { value: pokemon.name, isValid: true },\r\n        hp: { value: pokemon.hp, isValid: true },\r\n        cp: { value: pokemon.cp, isValid: true },\r\n        types: { value: pokemon.types, isValid: true }\r\n    });\r\n\r\n    const history = useHistory();\r\n  \r\n    const types: string[] = [\r\n        'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\r\n        'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\r\n    ];\r\n\r\n    // Gestion affichage des types de pokemon (checkbox checked) avant l'édition\r\n    const hasType = (type: string): boolean => {\r\n        return form.types.value.includes(type);\r\n    }\r\n\r\n    // Edition d'un pokemon (formulaire champs: nom, hp, cp)\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const fieldName: string = e.target.name;\r\n        const fieldValue: string = e.target.value;\r\n        const newField: Field = {[fieldName]: { value: fieldValue}};\r\n\r\n        setForm({...form, ...newField});\r\n    }\r\n\r\n    // Edition d'un pokemon (formulaire champs: types)\r\n    const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const checked = e.target.checked;\r\n        let newField: Field;\r\n    \r\n        if(checked) {\r\n            // Si l'utilisateur coche un type, à l'ajoute à la liste des types du pokémon.\r\n            const newTypes: string[] = form.types.value.concat([type]);\r\n            newField = { value: newTypes };\r\n        } else {\r\n            // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\r\n            const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\r\n            newField = { value: newTypes };\r\n        }\r\n    \r\n        setForm({...form, ...{ types: newField }});\r\n    }\r\n\r\n    // Gestion validation image d'un pokémon\r\n    const isAddForm = () => {\r\n        return !isEditForm;\r\n    }\r\n\r\n    // Gestion des validations de champs\r\n    const validateForm = () => {\r\n        let newForm: Form = form;\r\n\r\n        // Validator url (picture)\r\n        if(isAddForm()) {\r\n            const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\r\n            const end = \".png\";\r\n\r\n            if(!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)) {\r\n                const errorMsg: string = \"L'url n'est pas validée.\";\r\n                const newField: Field = { value: form.picture.value, error: errorMsg, isValid: false };\r\n                newForm = { ...form, ...{ picture: newField } };\r\n            } else {\r\n                const newField: Field = { value: form.picture.value, error: '', isValid: true };\r\n                newForm = { ...form, ...{ picture: newField } };    \r\n            }\r\n        }\r\n        \r\n        // Validator name\r\n        if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\r\n            const errorMsg: string = 'Le nom du pokémon est requis (1-25). Les caractères spéciaux ne sont pas admis';\r\n            const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ name: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.name.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ name: newField } };\r\n        }\r\n    \r\n        // Validator hp\r\n        if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\r\n            const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\r\n            const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\r\n            newForm = { ...newForm, ...{ hp: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.hp.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ hp: newField } };\r\n        }\r\n    \r\n        // Validator cp\r\n        if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\r\n            const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\r\n            const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\r\n            newForm = { ...newForm, ...{ cp: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.cp.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ cp: newField } };\r\n        }\r\n    \r\n        setForm(newForm);\r\n        return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\r\n    }\r\n    \r\n    // Gestion de validation du champ Types\r\n    const isTypesValid = (type: string): boolean => {\r\n        // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\r\n        // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\r\n        if (form.types.value.length === 1 && hasType(type)) {\r\n            return false;\r\n        }\r\n        \r\n        // Cas n°1: Le pokémon a au moins 3 types.\r\n        // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\r\n        if (form.types.value.length >= 3 && !hasType(type)) { \r\n            return false; \r\n        } \r\n        \r\n        // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \r\n        // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\r\n        return true;\r\n    }\r\n\r\n    // Gestion de soumission du formulaire\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        const isFormValid = validateForm();\r\n        if(isFormValid) {\r\n            pokemon.picture = form.picture.value;\r\n            pokemon.name    = form.name.value;\r\n            pokemon.hp      = form.hp.value;\r\n            pokemon.cp      = form.cp.value;\r\n            pokemon.types   = form.types.value;\r\n\r\n            isEditForm ? updatePokemon() : addPokemon();\r\n        }\r\n    }\r\n\r\n    // Ajouter un pokémon\r\n    const addPokemon = () => {\r\n        PokemonService.addPokemon(pokemon).then(() => history.push('/pokemons'));\r\n    }\r\n\r\n    // Editer un pokémon\r\n    const updatePokemon = () => {\r\n        PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\r\n    }\r\n\r\n    // Supprimer un pokémon\r\n    const deletePokemon = () => {\r\n        PokemonService.deletePokemon(pokemon).then(() => history.push(`/pokemons`));\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={e => handleSubmit(e)}>\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m8 offset-m2\">\r\n                    <div className=\"card hoverable\">\r\n                        {isEditForm && (\r\n                            <div className=\"card-image\">\r\n                                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n                                <span className=\"btn-floating halfway-fab waves-effect waves-light\">\r\n                                    <i onClick={deletePokemon} className=\"material-icons\">delete</i>\r\n                                </span>\r\n                            </div>\r\n                        )}                        \r\n                        <div className=\"card-stacked\">\r\n                            <div className=\"card-content\">\r\n                                {/* Pokemon picture */}\r\n                                {isAddForm() && (\r\n                                   <div className=\"form-group\">\r\n                                        <label htmlFor=\"picture\">Image</label>\r\n                                        <input id=\"picture\" name=\"picture\" type=\"text\" className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)}></input>\r\n                                        {/* error */}\r\n                                        {form.picture.error &&\r\n                                            <div className=\"card-panel red accent-1\">\r\n                                                {form.name.error}\r\n                                            </div>\r\n                                        }\r\n                                    </div> \r\n                                )}                                \r\n                                {/* Pokemon name */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"name\">Nom</label>\r\n                                    <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {/* error */}\r\n                                    {form.name.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.name.error}\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                {/* Pokemon hp */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"hp\">Point de vie</label>\r\n                                    <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {/* error */}\r\n                                    {form.hp.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.hp.error}\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                {/* Pokemon cp */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"cp\">Dégâts</label>\r\n                                    <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {/* error */}\r\n                                    {form.cp.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.cp.error}\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                {/* Pokemon types */}\r\n                                <div className=\"form-group\">\r\n                                    <label>Types</label>\r\n                                    {types.map(type => (\r\n                                        <div key={type} style={{marginBottom: '10px'}}>\r\n                                            <label>\r\n                                                <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} disabled={!isTypesValid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\r\n                                                <span>\r\n                                                <p className={formatType(type)}>{ type }</p>\r\n                                                </span>\r\n                                            </label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div> {/* /div card-content */}\r\n                            <div className=\"card-action center\">\r\n                                {/* Submit button */}\r\n                                <button type=\"submit\" className=\"btn\">Valider</button>\r\n                            </div>\r\n                        </div> {/* /div card-stacked */}\r\n                    </div> {/* /div card hoverable */}\r\n                </div> {/* /div col */}\r\n            </div> {/* /div row */}\r\n        </form>\r\n    );\r\n};\r\n   \r\nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport PokemonForm from '../components/pokemon-form';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonService from '../services/pokemon-service';\r\nimport Loader from '../components/loader';\r\n \r\ntype Params = { id: string };\r\n  \r\nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n    \r\n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\r\n  \r\n  useEffect(() => {\r\n    PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\r\n  }, [match.params.id]);\r\n    \r\n  return (\r\n    <div>\r\n        { pokemon ? (\r\n            <div className=\"row\">\r\n                <h2 className=\"header center\">Éditer { pokemon.name }</h2>\r\n                <PokemonForm pokemon={pokemon} isEditForm={true}></PokemonForm>\r\n            </div>\r\n        ) : (\r\n            <h4 className=\"center\"><Loader /></h4>\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonEdit;","export default class Pokemon {\r\n    // 1. Typage des propriétés d'un pokémon.\r\n    id: number;\r\n    hp: number;\r\n    cp: number;\r\n    name: string;\r\n    picture: string;\r\n    types: Array<string>;\r\n    created: Date;\r\n\r\n    // 2. Définition des valeurs par défaut des propriétés d'un pokémon.\r\n    constructor(\r\n        id: number,\r\n        hp: number = 100,\r\n        cp: number = 10,\r\n        name: string = '...',\r\n        picture: string = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/XXX.png',\r\n        types: Array<string> = ['Normal'],\r\n        created: Date = new Date()\r\n    ) {\r\n        // 3. Initialisation des propriétés d'un pokémon.\r\n        this.id = id;\r\n        this.hp = hp;\r\n        this.cp = cp;\r\n        this.name = name;\r\n        this.picture = picture;\r\n        this.types = types;\r\n        this.created = created;    \r\n    }\r\n}","import React, { FunctionComponent, useState } from 'react';\r\nimport PokemonForm from '../components/pokemon-form';\r\nimport Pokemon from '../models/pokemon';\r\n\r\nconst PokemonAdd: FunctionComponent = () => {\r\n    const [id] = useState<number>(new Date().getTime());\r\n    const [pokemon] = useState<Pokemon>(new Pokemon(id));\r\n    \r\n    return (\r\n        <div className=\"row\">\r\n            <h2 className=\"header center\">Ajouter un pokémon</h2>\r\n            <PokemonForm pokemon={pokemon} isEditForm={false}></PokemonForm>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PokemonAdd;","export default class AuthentificationService {\r\n    static isAuthenticated: boolean = false;\r\n\r\n    static login(username: string, password: string): Promise<boolean> {\r\n        const isAuthenticated = (username === 'pikachu' && password === 'pikachu');\r\n\r\n        return new Promise(resolve => {\r\n            setTimeout(() => {\r\n                this.isAuthenticated = isAuthenticated;\r\n                resolve(isAuthenticated);\r\n            }, 1000);\r\n        });\r\n    }\r\n}","import React, { FunctionComponent, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport AuthenticationService from '../services/authentication-service';\r\n\r\ntype Field = {\r\n  value?: any,\r\n  error?: string,\r\n  isValid?: boolean\r\n};\r\n\r\ntype Form = {\r\n  username: Field,\r\n  password: Field\r\n}\r\n\r\nconst Login: FunctionComponent = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    const [form, setForm] = useState<Form>({\r\n        username: { value: '' },\r\n        password: { value: '' },\r\n    });\r\n\r\n    const [message, setMessage] = useState<string>('Vous êtes déconnecté.');\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const fieldName: string = e.target.name;\r\n        const fieldValue: string = e.target.value;\r\n        const newField: Field = { [fieldName]: { value: fieldValue } };\r\n\r\n        setForm({ ...form, ...newField});\r\n    }\r\n\r\n    const validateForm = () => {\r\n        let newForm: Form = form;\r\n\r\n        // Validator username\r\n        if(form.username.value.length < 3) {\r\n            const errorMsg: string = 'Votre prénom doit faire au moins 3 caractères de long.';\r\n            const newField: Field = { value: form.username.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ username: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.username.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ username: newField } };\r\n        }\r\n\r\n        // Validator password\r\n        if(form.password.value.length < 6) {\r\n            const errorMsg: string = 'Votre mot de passe doit faire au moins 6 caractères de long.';\r\n            const newField: Field = {value: form.password.value, error: errorMsg, isValid: false};\r\n            newForm = { ...newForm, ...{ password: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.password.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ password: newField } };\r\n        }\r\n\r\n        setForm(newForm);\r\n\r\n        return newForm.username.isValid && newForm.password.isValid;\r\n    }\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        const isFormValid = validateForm();\r\n        if(isFormValid) {\r\n            setMessage('👉 Tentative de connexion en cours ...');\r\n            AuthenticationService.login(form.username.value, form.password.value).then(isAuthenticated => {\r\n                if(!isAuthenticated) {\r\n                    setMessage('🔐 Identifiant ou mot de passe incorrect.');\r\n                    return;\r\n                }            \r\n                history.push('/pokemons');\r\n                \r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={(e) => handleSubmit(e)}>\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m8 offset-m2\">\r\n                    <div className=\"card hoverable\">\r\n                        <div className=\"card-stacked\">\r\n                            <div className=\"card-content\">\r\n                                {/* Form message */}\r\n                                {message && <div className=\"form-group\">\r\n                                    <div className=\"card-panel grey lighten-5\">\r\n                                        {message}\r\n                                    </div>\r\n                                </div>}\r\n                                {/* Field username */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"username\">Identifiant</label>\r\n                                    <input id=\"username\" type=\"text\" name=\"username\" className=\"form-control\" value={form.username.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {/* error */}\r\n                                    {form.username.error &&\r\n                                    <div className=\"card-panel red accent-1\"> \r\n                                        {form.username.error} \r\n                                    </div>} \r\n                                </div>\r\n                                {/* Field password */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\">Mot de passe</label>\r\n                                    <input id=\"password\" type=\"password\" name=\"password\" className=\"form-control\" value={form.password.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {/* error */}\r\n                                    {form.password.error &&\r\n                                    <div className=\"card-panel red accent-1\"> \r\n                                        {form.password.error} \r\n                                    </div>} \r\n                                </div>\r\n                            </div> {/* /div card-content */}\r\n                            <div className=\"card-action center\">\r\n                                {/* Submit button */}\r\n                                <button type=\"submit\" className=\"btn\">Valider</button>\r\n                            </div> {/* /div card-action center */}\r\n                        </div> {/* /div card-stacked */}\r\n                    </div> {/* /div card hoverable */}\r\n                </div> {/* /div col */}\r\n            </div> {/* /div row */}\r\n        </form>\r\n    );\r\n};\r\n \r\nexport default Login;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport AuthenticationService from './services/authentication-service';\r\n  \r\nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\r\n  <Route {...rest} render={(props) => {\r\n    const isAuthenticated = AuthenticationService.isAuthenticated;\r\n    if (!isAuthenticated) {    \r\n      return <Redirect to={{ pathname: '/login' }} />\r\n    }\r\n  \r\n    return <Component {...props} />\r\n  }} />\r\n);\r\n  \r\nexport default PrivateRoute;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport PokemonList from './pages/pokemon-list';\r\nimport PokemonDetail from './pages/pokemon-detail';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport PageNotFound from './pages/page-not-found';\r\nimport PokemonEdit from './pages/pokemon-edit';\r\nimport PokemonAdd from './pages/pokemon-add';\r\nimport Login from './pages/login';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nconst App: FunctionComponent = () => {\r\n\r\n    return (\r\n        <Router>\r\n            <div>\r\n                {/* La barre de navigation commun à toutes les pages */}\r\n                <nav>\r\n                    <div className=\"nav-wrapper teal\">\r\n                        <Link to=\"/\">Pokédex</Link>\r\n                    </div>\r\n                </nav>\r\n                {/* Le système de gestion des routes de notre application */}\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={PokemonList} />\r\n                    <Route exact path=\"/login\" component={Login} />\r\n                    <Route exact path=\"/pokemons\" component={PokemonList} />\r\n                    <PrivateRoute exact path=\"/pokemons/add\" component={PokemonAdd} />\r\n                    <PrivateRoute exact path=\"/pokemons/edit/:id\" component={PokemonEdit} />\r\n                    <Route path=\"/pokemons/:id\" component={PokemonDetail} />                    \r\n                    <Route component={PageNotFound} />\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}